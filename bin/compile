#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

node_version="0.10.29"

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
trap cat_npm_debug_log ERR

package_hash=`md5sum $build_dir/package.json | awk '{print $1}'`
scripts_hash=`find $build_dir/public/javascripts/ -type f -name "*.js" -exec md5sum {} + | awk '{print $1}' | sort | md5sum | awk '{print $1}'`
styles_hash=`find $build_dir/public/stylesheets/ -type f -name "*.less" -exec md5sum {} + | awk '{print $1}' | sort | md5sum | awk '{print $1}'`

old_package_hash=`cat $cache_dir/node/.heroku/package-hash`
old_scripts_hash=`cat $cache_dir/node/.heroku/scripts-hash`
old_styles_hash=`cat $cache_dir/node/.heroku/styles-hash`

# status "Package hashes:"
# status "$package_hash"
# status "$old_package_hash"

# status "Script hashes:"
# status "$scripts_hash"
# status "$old_scripts_hash"

# status "Styles hashes:"
# status "$styles_hash"
# status "$old_styles_hash"

if test -f $cache_dir/node/.heroku/scripts-hash && test -f $cache_dir/node/.heroku/styles-hash && [ "$old_scripts_hash" == "$scripts_hash" ] && [ "$old_styles_hash" == "$styles_hash" ]; then
  status "No static resources have been modified since last commit, skipping entirely"
fi

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v0.10.29/node-v0.10.29-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v0.10.29-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$build_dir/vendor/node/bin:$PATH

# Run subsequent node/npm commands from the build path
cd $build_dir

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $build_dir/node_modules; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent
elif test -d $cache_dir/node/node_modules && test -f $cache_dir/node/.heroku/package-hash && [ "$old_package_hash" == "$package_hash" ]; then
  status "Restoring node_modules directory from cache"
  cp -r $cache_dir/node/node_modules $build_dir/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent

  if test -f $cache_dir/node/.heroku/node-version && [ $(cat $cache_dir/node/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi

else
  status "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install | indent

  # Purge node-related cached content, being careful not to purge the top-level
  # cache, for the sake of heroku-buildpack-multi apps.
  rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
  rm -rf $cache_dir/node
  mkdir -p $cache_dir/node

  # If app has a node_modules directory, cache it.
  if test -d $build_dir/node_modules; then
    status "Caching node_modules directory for future builds"
    cp -r $build_dir/node_modules $cache_dir/node
  fi
fi


# Persist goodies like node-version in the slug
mkdir -p $build_dir/.heroku

# Save resolved node version in the slug for later reference
echo $node_version > $build_dir/.heroku/node-version

# Save package hash in the slug
echo $package_hash > $build_dir/.heroku/package-hash
echo $scripts_hash > $build_dir/.heroku/scripts-hash
echo $styles_hash > $build_dir/.heroku/styles-hash

# Copy goodies to the cache
cp -r $build_dir/.heroku $cache_dir/node

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

##### Gulp stuff
status "Found gulpfile"
if test -f $cache_dir/node/.heroku/scripts-hash && [ "$old_scripts_hash" = "$scripts_hash" ]; then
  status "No script resources have been modified since last commit, skipping"
else
  $build_dir/node_modules/.bin/gulp scripts-prod
fi

if test -f $cache_dir/node/.heroku/styles-hash && [ "$old_styles_hash" = "$styles_hash" ]; then
  status "No style resources have been modified since last commit, skipping"
else
  $build_dir/node_modules/.bin/gulp styles-prod
fi

##### Write the revision version to the config file
status "Writing revision to config file"
echo assetVersion=\"`date +"%s"`\" > conf/asset-version.conf

status "Removing node modules"
rm -rf "$build_dir/node_modules"